security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)    
    firewalls:
        # https://github.com/markitosgv/JWTRefreshTokenBundle
        # api_token_refresh:
        #     pattern: ^/api/token/refresh
        #     stateless: true
        #     refresh_jwt: ~
        api_docs:
            pattern: ^/api/docs
            security: false
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            json_login:
                check_path: auth # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: app_logout
                delete_cookies:
                    BEARER: { path: '/', domain: null, secure: false, samesite: 'lax' }
                # where to redirect after logout
                # target: app_any_route
                clear_site_data:
                    - cookies
                    - cache
                    - storage
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS}
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: ROLE_STUDENT }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_STUDENT: ~
        ROLE_TEACHER: ROLE_STUDENT
        ROLE_ADMIN: ROLE_TEACHER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

